<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/mrpanel-server/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/mrpanel-server/src/main/resources/application.properties" />
              <option name="originalContent" value="# ...existing code...&#10;DB_HOST=localhost&#10;DB_PORT=5432&#10;DB_DATABASE=postgres&#10;DB_USERNAME=postgres&#10;DB_PASSWORD=zabimaru1&#10;# Database configuration&#10;# Use environment variables or default values&#10;&#10;spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_DATABASE:mrpanel}&#10;spring.datasource.username=${DB_USERNAME:postgres}&#10;spring.datasource.password=${DB_PASSWORD:postgres}&#10;spring.datasource.driver-class-name=org.postgresql.Driver&#10;&#10;# Ensure Flyway uses the same credentials as datasource&#10;spring.flyway.user=${DB_USERNAME:postgres}&#10;spring.flyway.password=${DB_PASSWORD:postgres}" />
              <option name="updatedContent" value="# ...existing code...&#10;DB_HOST=localhost&#10;DB_PORT=5432&#10;DB_DATABASE=postgres&#10;DB_USERNAME=postgres&#10;DB_PASSWORD=zabimaru1&#10;# Database configuration&#10;# Use environment variables or default values&#10;&#10;spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_DATABASE:mrpanel}&#10;spring.datasource.username=${DB_USERNAME:postgres}&#10;spring.datasource.password=${DB_PASSWORD:postgres}&#10;spring.datasource.driver-class-name=org.postgresql.Driver&#10;&#10;# Ensure Flyway uses the same credentials as datasource&#10;spring.flyway.user=${DB_USERNAME:postgres}&#10;spring.flyway.password=${DB_PASSWORD:postgres}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/mrpanel-ui-web/api/auth/[...nextauth]/route.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/mrpanel-ui-web/api/auth/[...nextauth]/route.ts" />
              <option name="originalContent" value="import { PrismaClient } from &quot;@prisma/client&quot;&#10;import { NextResponse } from &quot;next/server&quot;&#10;import GoogleProvider from &quot;next-auth/providers/google&quot;&#10;import { NextAuthOptions } from &quot;next-auth&quot;&#10;&#10;const globalForPrisma = globalThis as unknown as { prisma: PrismaClient }&#10;&#10;export const prisma = globalForPrisma.prisma || new PrismaClient()&#10;&#10;if (process.env.NODE_ENV !== &quot;production&quot;) globalForPrisma.prisma = prisma&#10;&#10;const GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID!&#10;const GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET!&#10;&#10;const auth0Options: NextAuthOptions = {&#10;    session: { strategy: &quot;jwt&quot; },&#10;    providers: [&#10;        GoogleProvider({&#10;            clientId: GOOGLE_CLIENT_ID,&#10;            clientSecret: GOOGLE_CLIENT_SECRET,&#10;        }),&#10;    ],&#10;    callbacks: {&#10;        async signIn({ account, profile }) {&#10;            if (!profile?.email) {&#10;                throw new Error('Zarejestruj sie fajfusie')&#10;            }&#10;            await prisma.user.upsert({&#10;                where: { email: profile.email! },&#10;                create: {&#10;                    email: profile.email!,&#10;                    name: profile.name!,&#10;                },&#10;                update: { name: profile.name! },&#10;            })&#10;            return true&#10;        },&#10;&#10;&#10;        },&#10;    }&#10;    // ...other options if needed...&#10;&#10;&#10;// Export NextAuth handler&#10;import NextAuth from &quot;next-auth&quot;&#10;const handler = NextAuth(auth0Options)&#10;export { handler as GET, handler as POST }&#10;" />
              <option name="updatedContent" value="import { PrismaClient } from &quot;@prisma/client&quot;&#10;import { NextResponse } from &quot;next/server&quot;&#10;import GoogleProvider from &quot;next-auth/providers/google&quot;&#10;import { NextAuthOptions } from &quot;next-auth&quot;&#10;import NextAuth from &quot;next-auth&quot;&#10;&#10;const globalForPrisma = globalThis as unknown as { prisma: PrismaClient }&#10;&#10;export const prisma = globalForPrisma.prisma || new PrismaClient()&#10;&#10;if (process.env.NODE_ENV !== &quot;production&quot;) globalForPrisma.prisma = prisma&#10;&#10;const GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID!&#10;const GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET!&#10;&#10;const auth0Options: NextAuthOptions = {&#10;    session: { strategy: &quot;jwt&quot; },&#10;    providers: [&#10;        GoogleProvider({&#10;            clientId: GOOGLE_CLIENT_ID,&#10;            clientSecret: GOOGLE_CLIENT_SECRET,&#10;        }),&#10;    ],&#10;    callbacks: {&#10;        async signIn({ account, profile }) {&#10;            if (!profile?.email) {&#10;                throw new Error('Zarejestruj sie fajfusie')&#10;            }&#10;            await prisma.user.upsert({&#10;                where: { email: profile.email! },&#10;                create: {&#10;                    email: profile.email!,&#10;                    name: profile.name!,&#10;                },&#10;                update: { name: profile.name! },&#10;            })&#10;            return true&#10;        },&#10;        async jwt({ token, account, profile }) {&#10;            if (account?.access_token) {&#10;                token.accessToken = account.access_token&#10;            }&#10;            if (profile?.email) {&#10;                token.email = profile.email&#10;            }&#10;            return token&#10;        },&#10;        async session({ session, token }) {&#10;            if (token?.accessToken) {&#10;                session.accessToken = token.accessToken as string&#10;            }&#10;            return session&#10;        }&#10;    }&#10;}&#10;&#10;const handler = NextAuth(auth0Options)&#10;export { handler as GET, handler as POST }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>